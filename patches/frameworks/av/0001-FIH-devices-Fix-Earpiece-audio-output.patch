From c226ddae70e8a8acc849c1700c1e5f0f9c6a5efc Mon Sep 17 00:00:00 2001
From: phhusson <phh@phh.me>
Date: Mon, 7 Jan 2019 21:22:49 +0100
Subject: [PATCH 1/2] FIH devices: Fix "Earpiece" audio output

On some FIH devices (confirmed on Razer, and probably on Aquos SS2),
Earpiece is not listed in attachedDevices, and devicePort's profile
mentions it is AUDIO_CHANNEL_IN_MONO, instead of AUDIO_CHANNEL_OUT_MONO.

Detect such cases (output device, but got only AUDIO_CHANNEL_IN_MONO),
and fix both channelMasks and attachedDevices

Change-Id: I68c14d24804ed0dd02d80b84a7a3b0f0ffd8f4ef
---
 .../managerdefinitions/src/Serializer.cpp     | 25 ++++++++++++++++---
 1 file changed, 22 insertions(+), 3 deletions(-)

diff --git a/services/audiopolicy/common/managerdefinitions/src/Serializer.cpp b/services/audiopolicy/common/managerdefinitions/src/Serializer.cpp
index a22400454..f58d7e529 100644
--- a/services/audiopolicy/common/managerdefinitions/src/Serializer.cpp
+++ b/services/audiopolicy/common/managerdefinitions/src/Serializer.cpp
@@ -191,16 +191,25 @@ const char AudioProfileTraits::Attributes::name[] = "name";
 const char AudioProfileTraits::Attributes::samplingRates[] = "samplingRates";
 const char AudioProfileTraits::Attributes::format[] = "format";
 const char AudioProfileTraits::Attributes::channelMasks[] = "channelMasks";
+static bool fixedEarpieceChannels = false;
 
 status_t AudioProfileTraits::deserialize(_xmlDoc */*doc*/, const _xmlNode *root, PtrElement &profile,
-                                         PtrSerializingCtx /*serializingContext*/)
+                                         PtrSerializingCtx serializingContext)
 {
+    bool isOutput = serializingContext != nullptr;
     string samplingRates = getXmlAttribute(root, Attributes::samplingRates);
     string format = getXmlAttribute(root, Attributes::format);
     string channels = getXmlAttribute(root, Attributes::channelMasks);
+    ChannelTraits::Collection channelsMask = channelMasksFromString(channels, ",");
+
+    //Some Foxconn devices have wrong earpiece channel mask, leading to no channel mask
+    if(channelsMask.size() == 1 && channelsMask[0] == AUDIO_CHANNEL_IN_MONO && isOutput) {
+        fixedEarpieceChannels = true;
+        channelsMask = channelMasksFromString("AUDIO_CHANNEL_OUT_MONO", ",");
+    }
 
     profile = new Element(formatFromString(format, gDynamicFormat),
-                          channelMasksFromString(channels, ","),
+                          channelsMask,
                           samplingRatesFromString(samplingRates, ","));
 
     profile->setDynamicFormat(profile->getFormat() == gDynamicFormat);
@@ -316,7 +325,10 @@ status_t DevicePortTraits::deserialize(_xmlDoc *doc, const _xmlNode *root, PtrEl
     }
 
     AudioProfileTraits::Collection profiles;
-    deserializeCollection<AudioProfileTraits>(doc, root, profiles, NULL);
+    if(audio_is_output_devices(type))
+        deserializeCollection<AudioProfileTraits>(doc, root, profiles, (PtrSerializingCtx)1);
+    else
+        deserializeCollection<AudioProfileTraits>(doc, root, profiles, NULL);
     if (profiles.isEmpty()) {
         sp <AudioProfile> dynamicProfile = new AudioProfile(gDynamicFormat,
                                                             ChannelsVector(), SampleRateVector());
@@ -481,6 +493,13 @@ status_t ModuleTraits::deserialize(xmlDocPtr doc, const xmlNode *root, PtrElemen
         }
         children = children->next;
     }
+    if(fixedEarpieceChannels) {
+        sp<DeviceDescriptor> device =
+            module->getDeclaredDevices().getDeviceFromTagName(String8("Earpiece"));
+	if(device != 0)
+		ctx->addAvailableDevice(device);
+	fixedEarpieceChannels = false;
+    }
     return NO_ERROR;
 }
 
-- 
2.19.1